clouds=off
oldHandLight=false
dynamicHandLight=true
oldLighting=false
shadowTranslucent=true
underwaterOverlay=false
sun=false
moon=false
vignette=false
backFace.solid=false 
backFace.cutout=false
backFace.cutoutMipped=false
backFace.translucent=false
rain.depth=true
beacon.beam.depth=true
separateAo=false
frustum.culling=true
blend.gbuffers_terrain=off
blend.gbuffers_basic=off
blend.gbuffers_hand=off
blend.gbuffers_skybasic=off
# I have not tested this yet with lower optifine/minecraft versions
# If anyone can get this shader working on lower versions, please let me know
# I'll then lower the minimum version
version.1.12.2=D1
texture.lightmap=lib/Resources/lightmap.png
texture.composite.colortex3=lib/Resources/lensdirt.png 
# Credit to WorldTeller for providing this texture
texture.deferred.depthtex1=lib/Resources/Cirrus.png 
texture.deferred.depthtex2=lib/Resources/OpticalDepth.dat TEXTURE_2D RGB32F 2048 2048 RGB FLOAT

profile.LOW = shadowMapResolution=1024 shadowDistance=64 SHADOW_SAMPLES=0.0 SHADOW_QUALITY=1.0 VIBRANT_SUN_LIGHTING=true INSCATTERING_STEPS=32 VOLUMETRIC_CLOUDS=false CLOUD_INSCATTERING_STEPS=8 CLOUD_LIGHT_STEPS=4
profile.MEDIUM = shadowMapResolution=2048 shadowDistance=128 SHADOW_SAMPLES=1.0 SHADOW_QUALITY=1.0 VIBRANT_SUN_LIGHTING=true INSCATTERING_STEPS=64 VOLUMETRIC_CLOUDS=true CLOUD_INSCATTERING_STEPS=12 CLOUD_LIGHT_STEPS=6
profile.HIGH = shadowMapResolution=3072 shadowDistance=128 SHADOW_SAMPLES=1.0 SHADOW_QUALITY=1.0 VIBRANT_SUN_LIGHTING=true INSCATTERING_STEPS=128 VOLUMETRIC_CLOUDS=true CLOUD_INSCATTERING_STEPS=16 CLOUD_LIGHT_STEPS=8
profile.ULTRA = shadowMapResolution=4096 shadowDistance=180 SHADOW_SAMPLES=2.0 SHADOW_QUALITY=1.0 VIBRANT_SUN_LIGHTING=true INSCATTERING_STEPS=192 VOLUMETRIC_CLOUDS=true CLOUD_INSCATTERING_STEPS=24 CLOUD_LIGHT_STEPS=12

screen = <profile> <empty> [Lighting] [Sky] [PostProcess]

screen.Lighting = [Shadows]
screen.Shadows = shadowMapResolution shadowDistance SHADOW_SAMPLES SHADOW_QUALITY VIBRANT_SUN_LIGHTING

screen.Sky = [Atmosphere] [Clouds]
screen.Atmosphere = INSCATTERING_STEPS MULTISCATTERING
screen.Clouds = VOLUMETRIC_CLOUDS CLOUD_INSCATTERING_STEPS CLOUD_LIGHT_STEPS

screen.PostProcess = [Color] [DepthofField]
screen.Color = TONEMAPPING_OPERATOR
screen.DepthofField = COC_BLUR

uniform.vec2.ScreenSize = vec2(viewWidth, viewHeight)
uniform.vec2.TexelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)
uniform.float.CenterDistance = ((2.0 * near * far) / (far + near - (2.0 * centerDepthSmooth - 1.0) * (far - near))) * (far - near) + near
# Credit to xirreal for helping me with the matrix multiplication
variable.float.LightDirectionX = gbufferModelViewInverse.0.0 * shadowLightPosition.x + gbufferModelViewInverse.1.0 * shadowLightPosition.y + gbufferModelViewInverse.2.0 * shadowLightPosition.z
variable.float.LightDirectionY = gbufferModelViewInverse.0.1 * shadowLightPosition.x + gbufferModelViewInverse.1.1 * shadowLightPosition.y + gbufferModelViewInverse.2.1 * shadowLightPosition.z
variable.float.LightDirectionZ = gbufferModelViewInverse.0.2 * shadowLightPosition.x + gbufferModelViewInverse.1.2 * shadowLightPosition.y + gbufferModelViewInverse.2.2 * shadowLightPosition.z
variable.float.LightDirectionNormalizer = 1.0 / sqrt(LightDirectionX * LightDirectionX + LightDirectionY * LightDirectionY + LightDirectionZ * LightDirectionZ)
uniform.vec3.LightDirection = vec3(LightDirectionX * LightDirectionNormalizer, LightDirectionY * LightDirectionNormalizer, LightDirectionZ * LightDirectionNormalizer)

variable.float.SunDirectionX = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.SunDirectionY = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.SunDirectionZ = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
variable.float.SunDirectionNormalizer = 1.0 / sqrt(SunDirectionX * SunDirectionX + SunDirectionY * SunDirectionY + SunDirectionZ * SunDirectionZ)
uniform.vec3.SunDirection = vec3(SunDirectionX * LightDirectionNormalizer, SunDirectionY * LightDirectionNormalizer, SunDirectionZ * LightDirectionNormalizer)

uniform.vec3.MoonDirection = vec3(-SunDirectionX * LightDirectionNormalizer, -SunDirectionY * LightDirectionNormalizer, -SunDirectionZ * LightDirectionNormalizer)